# Cursor Rules para AI Chatbot

## Estructura del Proyecto

- El proyecto utiliza Next.js con App Router
- Los componentes de autenticación están en `app/(auth)/`
- Los componentes de chat están en `app/(chat)/`
- Los componentes compartidos están en `components/`
- Se utiliza la convención `@/` para importar desde la raíz del proyecto

## Patrones de Implementación

- Los componentes interactivos deben usar la directiva `'use client'`
- Los Server Actions deben usar la directiva `'use server'`
- Se usan Server Components por defecto (sin directiva)
- Para formularios, se utiliza el patrón form action con useActionState
- La validación de datos se realiza con zod

## Estilo y Convenciones

- Se usa Tailwind CSS para estilos
- Se utilizan componentes de shadcn/ui (basados en Radix UI)
- Las clases CSS siguen convenciones de shadcn/ui
- Para iconos se usa lucide-react
- Se utiliza el tema claro/oscuro de next-themes

## Autenticación

- Se implementa con Auth.js v5 (NextAuth)
- El flujo de autenticación es email/password
- La protección de rutas se maneja con middleware
- Las credenciales se validan con bcrypt-ts

## Modelo de Datos

- Se utiliza Drizzle ORM para acceso a base de datos
- Los esquemas de base de datos están en lib/db/schema
- Las migraciones se manejan con comandos pnpm db:\*

## Integración con IA

- Se utiliza AI SDK para comunicación con modelos
- El modelo predeterminado es xAI (Grok)
- Las respuestas se transmiten mediante streaming
- Los contextos de conversación se almacenan en la base de datos

## Manejo de Errores

- Los errores de autenticación se muestran con toast
- Se implementa validación tanto en cliente como en servidor
- Se proporcionan mensajes de error descriptivos al usuario

## Comandos Útiles

- `pnpm dev`: Inicia el servidor de desarrollo
- `pnpm lint`: Verifica errores de linting
- `pnpm format`: Formatea el código
- `pnpm db:migrate`: Ejecuta migraciones de base de datos
